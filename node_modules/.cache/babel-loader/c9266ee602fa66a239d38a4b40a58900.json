{"ast":null,"code":"import axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\naxios.defaults.baseURL = 'https://goit-task-manager.herokuapp.com/'; // Utility to add JWT\n\nconst setAuthHeader = token => {\n  axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n}; // Utility to remove JWT\n\n\nconst clearAuthHeader = () => {\n  axios.defaults.headers.common.Authorization = '';\n};\n/*\n * POST @ /users/signup\n * body: { name, email, password }\n */\n\n\nexport const register = createAsyncThunk('auth/register', async (credentials, thunkAPI) => {\n  try {\n    const res = await axios.post('/users/signup', credentials); // After successful registration, add the token to the HTTP header\n\n    setAuthHeader(res.data.token);\n    return res.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n/*\n * POST @ /users/login\n * body: { email, password }\n */\n\nexport const logIn = createAsyncThunk('auth/login', async (credentials, thunkAPI) => {\n  try {\n    const res = await axios.post('/users/login', credentials); // After successful login, add the token to the HTTP header\n\n    setAuthHeader(res.data.token);\n    return res.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n/*\n * POST @ /users/logout\n * headers: Authorization: Bearer token\n */\n\nexport const logOut = createAsyncThunk('auth/logout', async (_, thunkAPI) => {\n  try {\n    await axios.post('/users/logout'); // After a successful logout, remove the token from the HTTP header\n\n    clearAuthHeader();\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n/*\n * GET @ /users/current\n * headers: Authorization: Bearer token\n */\n\nexport const refreshUser = createAsyncThunk('auth/refresh', async (_, thunkAPI) => {\n  // Reading the token from the state via getState()\n  const state = thunkAPI.getState();\n  const persistedToken = state.auth.token;\n\n  if (persistedToken === null) {\n    // If there is no token, exit without performing any request\n    return thunkAPI.rejectWithValue('Unable to fetch user');\n  }\n\n  try {\n    // If there is a token, add it to the HTTP header and perform the request\n    setAuthHeader(persistedToken);\n    const res = await axios.get('/users/me');\n    return res.data;\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});","map":{"version":3,"sources":["/Users/mcb/Desktop/Full stack/Репозиторії/testingHW/src/redux/auth/operations.js"],"names":["axios","createAsyncThunk","defaults","baseURL","setAuthHeader","token","headers","common","Authorization","clearAuthHeader","register","credentials","thunkAPI","res","post","data","error","rejectWithValue","message","logIn","logOut","_","refreshUser","state","getState","persistedToken","auth","get"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AAEAD,KAAK,CAACE,QAAN,CAAeC,OAAf,GAAyB,0CAAzB,C,CAEA;;AACA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAC7BL,EAAAA,KAAK,CAACE,QAAN,CAAeI,OAAf,CAAuBC,MAAvB,CAA8BC,aAA9B,GAA+C,UAASH,KAAM,EAA9D;AACD,CAFD,C,CAIA;;;AACA,MAAMI,eAAe,GAAG,MAAM;AAC5BT,EAAAA,KAAK,CAACE,QAAN,CAAeI,OAAf,CAAuBC,MAAvB,CAA8BC,aAA9B,GAA8C,EAA9C;AACD,CAFD;AAIA;AACA;AACA;AACA;;;AACA,OAAO,MAAME,QAAQ,GAAGT,gBAAgB,CACtC,eADsC,EAEtC,OAAOU,WAAP,EAAoBC,QAApB,KAAiC;AAC/B,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,IAAN,CAAW,eAAX,EAA4BH,WAA5B,CAAlB,CADE,CAEF;;AACAP,IAAAA,aAAa,CAACS,GAAG,CAACE,IAAJ,CAASV,KAAV,CAAb;AACA,WAAOQ,GAAG,CAACE,IAAX;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,WAAOJ,QAAQ,CAACK,eAAT,CAAyBD,KAAK,CAACE,OAA/B,CAAP;AACD;AACF,CAXqC,CAAjC;AAcP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,KAAK,GAAGlB,gBAAgB,CACnC,YADmC,EAEnC,OAAOU,WAAP,EAAoBC,QAApB,KAAiC;AAC/B,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,IAAN,CAAW,cAAX,EAA2BH,WAA3B,CAAlB,CADE,CAEF;;AACAP,IAAAA,aAAa,CAACS,GAAG,CAACE,IAAJ,CAASV,KAAV,CAAb;AACA,WAAOQ,GAAG,CAACE,IAAX;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,WAAOJ,QAAQ,CAACK,eAAT,CAAyBD,KAAK,CAACE,OAA/B,CAAP;AACD;AACF,CAXkC,CAA9B;AAcP;AACA;AACA;AACA;;AACA,OAAO,MAAME,MAAM,GAAGnB,gBAAgB,CAAC,aAAD,EAAgB,OAAOoB,CAAP,EAAUT,QAAV,KAAuB;AAC3E,MAAI;AACF,UAAMZ,KAAK,CAACc,IAAN,CAAW,eAAX,CAAN,CADE,CAEF;;AACAL,IAAAA,eAAe;AAChB,GAJD,CAIE,OAAOO,KAAP,EAAc;AACd,WAAOJ,QAAQ,CAACK,eAAT,CAAyBD,KAAK,CAACE,OAA/B,CAAP;AACD;AACF,CARqC,CAA/B;AAUP;AACA;AACA;AACA;;AACA,OAAO,MAAMI,WAAW,GAAGrB,gBAAgB,CACzC,cADyC,EAEzC,OAAOoB,CAAP,EAAUT,QAAV,KAAuB;AACrB;AACA,QAAMW,KAAK,GAAGX,QAAQ,CAACY,QAAT,EAAd;AACA,QAAMC,cAAc,GAAGF,KAAK,CAACG,IAAN,CAAWrB,KAAlC;;AAEA,MAAIoB,cAAc,KAAK,IAAvB,EAA6B;AAC3B;AACA,WAAOb,QAAQ,CAACK,eAAT,CAAyB,sBAAzB,CAAP;AACD;;AAED,MAAI;AACF;AACAb,IAAAA,aAAa,CAACqB,cAAD,CAAb;AACA,UAAMZ,GAAG,GAAG,MAAMb,KAAK,CAAC2B,GAAN,CAAU,WAAV,CAAlB;AACA,WAAOd,GAAG,CAACE,IAAX;AACD,GALD,CAKE,OAAOC,KAAP,EAAc;AACd,WAAOJ,QAAQ,CAACK,eAAT,CAAyBD,KAAK,CAACE,OAA/B,CAAP;AACD;AACF,CApBwC,CAApC","sourcesContent":["import axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\naxios.defaults.baseURL = 'https://goit-task-manager.herokuapp.com/';\n\n// Utility to add JWT\nconst setAuthHeader = token => {\n  axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n};\n\n// Utility to remove JWT\nconst clearAuthHeader = () => {\n  axios.defaults.headers.common.Authorization = '';\n};\n\n/*\n * POST @ /users/signup\n * body: { name, email, password }\n */\nexport const register = createAsyncThunk(\n  'auth/register',\n  async (credentials, thunkAPI) => {\n    try {\n      const res = await axios.post('/users/signup', credentials);\n      // After successful registration, add the token to the HTTP header\n      setAuthHeader(res.data.token);\n      return res.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\n/*\n * POST @ /users/login\n * body: { email, password }\n */\nexport const logIn = createAsyncThunk(\n  'auth/login',\n  async (credentials, thunkAPI) => {\n    try {\n      const res = await axios.post('/users/login', credentials);\n      // After successful login, add the token to the HTTP header\n      setAuthHeader(res.data.token);\n      return res.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\n/*\n * POST @ /users/logout\n * headers: Authorization: Bearer token\n */\nexport const logOut = createAsyncThunk('auth/logout', async (_, thunkAPI) => {\n  try {\n    await axios.post('/users/logout');\n    // After a successful logout, remove the token from the HTTP header\n    clearAuthHeader();\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\n/*\n * GET @ /users/current\n * headers: Authorization: Bearer token\n */\nexport const refreshUser = createAsyncThunk(\n  'auth/refresh',\n  async (_, thunkAPI) => {\n    // Reading the token from the state via getState()\n    const state = thunkAPI.getState();\n    const persistedToken = state.auth.token;\n\n    if (persistedToken === null) {\n      // If there is no token, exit without performing any request\n      return thunkAPI.rejectWithValue('Unable to fetch user');\n    }\n\n    try {\n      // If there is a token, add it to the HTTP header and perform the request\n      setAuthHeader(persistedToken);\n      const res = await axios.get('/users/me');\n      return res.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n"]},"metadata":{},"sourceType":"module"}