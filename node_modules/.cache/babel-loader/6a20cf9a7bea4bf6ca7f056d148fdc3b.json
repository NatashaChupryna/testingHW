{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { register, logIn, logOut, refreshUser } from './operations';\nconst initialState = {\n  user: {\n    name: null,\n    email: null\n  },\n  token: null,\n  isLoggedIn: false,\n  isRefreshing: false\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  extraReducers: {\n    [register.fulfilled](state, action) {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.isLoggedIn = true;\n    },\n\n    [logIn.fulfilled](state, action) {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.isLoggedIn = true;\n    },\n\n    [logOut.fulfilled](state) {\n      state.user = {\n        name: null,\n        email: null\n      };\n      state.token = null;\n      state.isLoggedIn = false;\n    },\n\n    [refreshUser.pending](state) {\n      state.isRefreshing = true;\n    },\n\n    [refreshUser.fulfilled](state, action) {\n      state.user = action.payload;\n      state.isLoggedIn = true;\n      state.isRefreshing = false;\n    },\n\n    [refreshUser.rejected](state) {\n      state.isRefreshing = false;\n    }\n\n  }\n});\nexport const authReducer = authSlice.reducer;","map":{"version":3,"sources":["/Users/mcb/Desktop/Full stack/Репозиторії/testingHW/src/redux/auth/slice.js"],"names":["createSlice","register","logIn","logOut","refreshUser","initialState","user","name","email","token","isLoggedIn","isRefreshing","authSlice","extraReducers","fulfilled","state","action","payload","pending","rejected","authReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,QAAT,EAAmBC,KAAnB,EAA0BC,MAA1B,EAAkCC,WAAlC,QAAqD,cAArD;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,KAAK,EAAE;AAArB,GADa;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,UAAU,EAAE,KAHO;AAInBC,EAAAA,YAAY,EAAE;AAJK,CAArB;AAOA,MAAMC,SAAS,GAAGZ,WAAW,CAAC;AAC5BO,EAAAA,IAAI,EAAE,MADsB;AAE5BF,EAAAA,YAF4B;AAG5BQ,EAAAA,aAAa,EAAE;AACb,KAACZ,QAAQ,CAACa,SAAV,EAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAClCD,MAAAA,KAAK,CAACT,IAAN,GAAaU,MAAM,CAACC,OAAP,CAAeX,IAA5B;AACAS,MAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACC,OAAP,CAAeR,KAA7B;AACAM,MAAAA,KAAK,CAACL,UAAN,GAAmB,IAAnB;AACD,KALY;;AAMb,KAACR,KAAK,CAACY,SAAP,EAAkBC,KAAlB,EAAyBC,MAAzB,EAAiC;AAC/BD,MAAAA,KAAK,CAACT,IAAN,GAAaU,MAAM,CAACC,OAAP,CAAeX,IAA5B;AACAS,MAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACC,OAAP,CAAeR,KAA7B;AACAM,MAAAA,KAAK,CAACL,UAAN,GAAmB,IAAnB;AACD,KAVY;;AAWb,KAACP,MAAM,CAACW,SAAR,EAAmBC,KAAnB,EAA0B;AACxBA,MAAAA,KAAK,CAACT,IAAN,GAAa;AAAEC,QAAAA,IAAI,EAAE,IAAR;AAAcC,QAAAA,KAAK,EAAE;AAArB,OAAb;AACAO,MAAAA,KAAK,CAACN,KAAN,GAAc,IAAd;AACAM,MAAAA,KAAK,CAACL,UAAN,GAAmB,KAAnB;AACD,KAfY;;AAgBb,KAACN,WAAW,CAACc,OAAb,EAAsBH,KAAtB,EAA6B;AAC3BA,MAAAA,KAAK,CAACJ,YAAN,GAAqB,IAArB;AACD,KAlBY;;AAmBb,KAACP,WAAW,CAACU,SAAb,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuC;AACrCD,MAAAA,KAAK,CAACT,IAAN,GAAaU,MAAM,CAACC,OAApB;AACAF,MAAAA,KAAK,CAACL,UAAN,GAAmB,IAAnB;AACAK,MAAAA,KAAK,CAACJ,YAAN,GAAqB,KAArB;AACD,KAvBY;;AAwBb,KAACP,WAAW,CAACe,QAAb,EAAuBJ,KAAvB,EAA8B;AAC5BA,MAAAA,KAAK,CAACJ,YAAN,GAAqB,KAArB;AACD;;AA1BY;AAHa,CAAD,CAA7B;AAiCA,OAAO,MAAMS,WAAW,GAAGR,SAAS,CAACS,OAA9B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { register, logIn, logOut, refreshUser } from './operations';\n\nconst initialState = {\n  user: { name: null, email: null },\n  token: null,\n  isLoggedIn: false,\n  isRefreshing: false,\n};\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  extraReducers: {\n    [register.fulfilled](state, action) {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.isLoggedIn = true;\n    },\n    [logIn.fulfilled](state, action) {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.isLoggedIn = true;\n    },\n    [logOut.fulfilled](state) {\n      state.user = { name: null, email: null };\n      state.token = null;\n      state.isLoggedIn = false;\n    },\n    [refreshUser.pending](state) {\n      state.isRefreshing = true;\n    },\n    [refreshUser.fulfilled](state, action) {\n      state.user = action.payload;\n      state.isLoggedIn = true;\n      state.isRefreshing = false;\n    },\n    [refreshUser.rejected](state) {\n      state.isRefreshing = false;\n    },\n  },\n});\n\nexport const authReducer = authSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}