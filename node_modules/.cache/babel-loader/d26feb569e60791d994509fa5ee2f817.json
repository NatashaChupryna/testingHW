{"ast":null,"code":"var _jsxFileName = \"/Users/mcb/Desktop/Full stack/\\u0420\\u0435\\u043F\\u043E\\u0437\\u0438\\u0442\\u043E\\u0440\\u0456\\u0456\\u0308/goit-react-hw-07-phonebook/src/components/ContactList/ContactList.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts, deleteContact } from 'redux/contactsOperations';\nimport { nanoid } from 'nanoid';\nimport { List, Button, Item } from './ContactList.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactList = () => {\n  _s();\n\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const filteredContacts = (contacts, filter) => {\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n  };\n\n  const visibleContacts = filteredContacts(contacts, filter);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(List, {\n    children: visibleContacts ? visibleContacts.map(contact => /*#__PURE__*/_jsxDEV(Item, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [contact.name, \" : \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: contact.number\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => dispatch(deleteContact(contact.id)),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)]\n    }, nanoid(), true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"\\u0442\\u0430 \\u0431\\u043B\\u0456\\u043D\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactList, \"28UQwfbDMiRdTb2z85SZuEFOXPQ=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = ContactList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"sources":["/Users/mcb/Desktop/Full stack/Репозиторії/goit-react-hw-07-phonebook/src/components/ContactList/ContactList.jsx"],"names":["useEffect","useSelector","useDispatch","fetchContacts","deleteContact","nanoid","List","Button","Item","ContactList","contacts","state","items","filter","dispatch","filteredContacts","contact","name","toLowerCase","includes","visibleContacts","map","number","id"],"mappings":";;;AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAAQC,aAAR,EAAuBC,aAAvB,QAA4C,0BAA5C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,IAAvB,QAAmC,sBAAnC;;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC/B,QAAMC,QAAQ,GAAGT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACD,QAAN,CAAeE,KAAzB,CAA5B;AACA,QAAMC,MAAM,GAAGZ,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACE,MAAhB,CAA1B;AACA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;;AAEA,QAAMa,gBAAgB,GAAG,CAACL,QAAD,EAAWG,MAAX,KAAsB;AAC7C,WAAOH,QAAQ,CAACG,MAAT,CAAgBG,OAAO,IAC5BA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,CAAoCN,MAAM,CAACK,WAAP,EAApC,CADK,CAAP;AAGD,GAJD;;AAMA,QAAME,eAAe,GAAGL,gBAAgB,CAACL,QAAD,EAAWG,MAAX,CAAxC;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,QAAQ,CAACX,aAAa,EAAd,CAAR;AACD,GAFQ,EAEN,CAACW,QAAD,CAFM,CAAT;AAKA,sBACE,QAAC,IAAD;AAAA,cACGM,eAAe,GACdA,eAAe,CAACC,GAAhB,CAAoBL,OAAO,iBACzB,QAAC,IAAD;AAAA,8BACE;AAAA,mBAAOA,OAAO,CAACC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAOD,OAAO,CAACM;AAAf;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,MAAMR,QAAQ,CAACV,aAAa,CAACY,OAAO,CAACO,EAAT,CAAd,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA,OAAWlB,MAAM,EAAjB;AAAA;AAAA;AAAA;AAAA,YADF,CADc,gBAWd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZJ;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAnCM;;GAAMI,W;UACMR,W,EACFA,W,EACEC,W;;;KAHNO,W","sourcesContent":["import {useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {fetchContacts, deleteContact } from 'redux/contactsOperations';\nimport { nanoid } from 'nanoid';\nimport { List, Button, Item } from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const filteredContacts = (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const visibleContacts = filteredContacts(contacts, filter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n\n  return (\n    <List>\n      {visibleContacts ? (\n        visibleContacts.map(contact => (\n          <Item key={nanoid()}>\n            <span>{contact.name} : </span>\n            <span>{contact.number}</span>\n            <Button onClick={() => dispatch(deleteContact(contact.id))}>\n              Delete\n            </Button>\n          </Item>\n        ))\n      ) : (\n        <span>та блін</span>\n      )}\n    </List>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}