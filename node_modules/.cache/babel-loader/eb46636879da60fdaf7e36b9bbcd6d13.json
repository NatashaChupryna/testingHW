{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { logOut } from 'redux/auth/operations';\nimport { fetchTasks, addTask, deleteTask } from './operations';\n\nconst handlePending = state => {\n  state.isLoading = true;\n};\n\nconst handleRejected = (state, action) => {\n  state.isLoading = false;\n  state.error = action.payload;\n};\n\nconst tasksSlice = createSlice({\n  name: 'tasks',\n  initialState: {\n    items: [],\n    isLoading: false,\n    error: null\n  },\n  extraReducers: {\n    [fetchTasks.pending]: handlePending,\n    [addTask.pending]: handlePending,\n    [deleteTask.pending]: handlePending,\n    [fetchTasks.rejected]: handleRejected,\n    [addTask.rejected]: handleRejected,\n    [deleteTask.rejected]: handleRejected,\n\n    [fetchTasks.fulfilled](state, action) {\n      state.isLoading = false;\n      state.error = null;\n      state.items = action.payload;\n    },\n\n    [addTask.fulfilled](state, action) {\n      state.isLoading = false;\n      state.error = null;\n      state.items.push(action.payload);\n    },\n\n    [deleteTask.fulfilled](state, action) {\n      state.isLoading = false;\n      state.error = null;\n      const index = state.items.findIndex(task => task.id === action.payload.id);\n      state.items.splice(index, 1);\n    },\n\n    [logOut.fulfilled](state) {\n      state.items = [];\n      state.error = null;\n      state.isLoading = false;\n    }\n\n  }\n});\nexport const tasksReducer = tasksSlice.reducer;","map":{"version":3,"sources":["/Users/mcb/Desktop/Full stack/Репозиторії/testingHW/src/redux/tasks/slice.js"],"names":["createSlice","logOut","fetchTasks","addTask","deleteTask","handlePending","state","isLoading","handleRejected","action","error","payload","tasksSlice","name","initialState","items","extraReducers","pending","rejected","fulfilled","push","index","findIndex","task","id","splice","tasksReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,UAAT,EAAqBC,OAArB,EAA8BC,UAA9B,QAAgD,cAAhD;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAC7BA,EAAAA,KAAK,CAACC,SAAN,GAAkB,IAAlB;AACD,CAFD;;AAIA,MAAMC,cAAc,GAAG,CAACF,KAAD,EAAQG,MAAR,KAAmB;AACxCH,EAAAA,KAAK,CAACC,SAAN,GAAkB,KAAlB;AACAD,EAAAA,KAAK,CAACI,KAAN,GAAcD,MAAM,CAACE,OAArB;AACD,CAHD;;AAKA,MAAMC,UAAU,GAAGZ,WAAW,CAAC;AAC7Ba,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZR,IAAAA,SAAS,EAAE,KAFC;AAGZG,IAAAA,KAAK,EAAE;AAHK,GAFe;AAO7BM,EAAAA,aAAa,EAAE;AACb,KAACd,UAAU,CAACe,OAAZ,GAAsBZ,aADT;AAEb,KAACF,OAAO,CAACc,OAAT,GAAmBZ,aAFN;AAGb,KAACD,UAAU,CAACa,OAAZ,GAAsBZ,aAHT;AAIb,KAACH,UAAU,CAACgB,QAAZ,GAAuBV,cAJV;AAKb,KAACL,OAAO,CAACe,QAAT,GAAoBV,cALP;AAMb,KAACJ,UAAU,CAACc,QAAZ,GAAuBV,cANV;;AAOb,KAACN,UAAU,CAACiB,SAAZ,EAAuBb,KAAvB,EAA8BG,MAA9B,EAAsC;AACpCH,MAAAA,KAAK,CAACC,SAAN,GAAkB,KAAlB;AACAD,MAAAA,KAAK,CAACI,KAAN,GAAc,IAAd;AACAJ,MAAAA,KAAK,CAACS,KAAN,GAAcN,MAAM,CAACE,OAArB;AACD,KAXY;;AAYb,KAACR,OAAO,CAACgB,SAAT,EAAoBb,KAApB,EAA2BG,MAA3B,EAAmC;AACjCH,MAAAA,KAAK,CAACC,SAAN,GAAkB,KAAlB;AACAD,MAAAA,KAAK,CAACI,KAAN,GAAc,IAAd;AACAJ,MAAAA,KAAK,CAACS,KAAN,CAAYK,IAAZ,CAAiBX,MAAM,CAACE,OAAxB;AACD,KAhBY;;AAiBb,KAACP,UAAU,CAACe,SAAZ,EAAuBb,KAAvB,EAA8BG,MAA9B,EAAsC;AACpCH,MAAAA,KAAK,CAACC,SAAN,GAAkB,KAAlB;AACAD,MAAAA,KAAK,CAACI,KAAN,GAAc,IAAd;AACA,YAAMW,KAAK,GAAGf,KAAK,CAACS,KAAN,CAAYO,SAAZ,CACZC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYf,MAAM,CAACE,OAAP,CAAea,EADvB,CAAd;AAGAlB,MAAAA,KAAK,CAACS,KAAN,CAAYU,MAAZ,CAAmBJ,KAAnB,EAA0B,CAA1B;AACD,KAxBY;;AAyBb,KAACpB,MAAM,CAACkB,SAAR,EAAmBb,KAAnB,EAA0B;AACxBA,MAAAA,KAAK,CAACS,KAAN,GAAc,EAAd;AACAT,MAAAA,KAAK,CAACI,KAAN,GAAc,IAAd;AACAJ,MAAAA,KAAK,CAACC,SAAN,GAAkB,KAAlB;AACD;;AA7BY;AAPc,CAAD,CAA9B;AAwCA,OAAO,MAAMmB,YAAY,GAAGd,UAAU,CAACe,OAAhC","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { logOut } from 'redux/auth/operations';\nimport { fetchTasks, addTask, deleteTask } from './operations';\n\nconst handlePending = state => {\n  state.isLoading = true;\n};\n\nconst handleRejected = (state, action) => {\n  state.isLoading = false;\n  state.error = action.payload;\n};\n\nconst tasksSlice = createSlice({\n  name: 'tasks',\n  initialState: {\n    items: [],\n    isLoading: false,\n    error: null,\n  },\n  extraReducers: {\n    [fetchTasks.pending]: handlePending,\n    [addTask.pending]: handlePending,\n    [deleteTask.pending]: handlePending,\n    [fetchTasks.rejected]: handleRejected,\n    [addTask.rejected]: handleRejected,\n    [deleteTask.rejected]: handleRejected,\n    [fetchTasks.fulfilled](state, action) {\n      state.isLoading = false;\n      state.error = null;\n      state.items = action.payload;\n    },\n    [addTask.fulfilled](state, action) {\n      state.isLoading = false;\n      state.error = null;\n      state.items.push(action.payload);\n    },\n    [deleteTask.fulfilled](state, action) {\n      state.isLoading = false;\n      state.error = null;\n      const index = state.items.findIndex(\n        task => task.id === action.payload.id\n      );\n      state.items.splice(index, 1);\n    },\n    [logOut.fulfilled](state) {\n      state.items = [];\n      state.error = null;\n      state.isLoading = false;\n    },\n  },\n});\n\nexport const tasksReducer = tasksSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}